// Code generated by MockGen. DO NOT EDIT.
// Source: deployment.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/steinfletcher/new-relic-concourse-deployment-resource/domain"
	reflect "reflect"
)

// MockDeploymentWriter is a mock of DeploymentWriter interface
type MockDeploymentWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentWriterMockRecorder
}

// MockDeploymentWriterMockRecorder is the mock recorder for MockDeploymentWriter
type MockDeploymentWriterMockRecorder struct {
	mock *MockDeploymentWriter
}

// NewMockDeploymentWriter creates a new mock instance
func NewMockDeploymentWriter(ctrl *gomock.Controller) *MockDeploymentWriter {
	mock := &MockDeploymentWriter{ctrl: ctrl}
	mock.recorder = &MockDeploymentWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeploymentWriter) EXPECT() *MockDeploymentWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockDeploymentWriter) Write(deployment domain.DeploymentInfo, applicationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", deployment, applicationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockDeploymentWriterMockRecorder) Write(deployment, applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDeploymentWriter)(nil).Write), deployment, applicationID)
}

// WriteWithName mocks base method
func (m *MockDeploymentWriter) WriteWithName(deployment domain.DeploymentInfo, applicationName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteWithName", deployment, applicationName)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteWithName indicates an expected call of WriteWithName
func (mr *MockDeploymentWriterMockRecorder) WriteWithName(deployment, applicationName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteWithName", reflect.TypeOf((*MockDeploymentWriter)(nil).WriteWithName), deployment, applicationName)
}

// MockDeploymentInfoReader is a mock of DeploymentInfoReader interface
type MockDeploymentInfoReader struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentInfoReaderMockRecorder
}

// MockDeploymentInfoReaderMockRecorder is the mock recorder for MockDeploymentInfoReader
type MockDeploymentInfoReaderMockRecorder struct {
	mock *MockDeploymentInfoReader
}

// NewMockDeploymentInfoReader creates a new mock instance
func NewMockDeploymentInfoReader(ctrl *gomock.Controller) *MockDeploymentInfoReader {
	mock := &MockDeploymentInfoReader{ctrl: ctrl}
	mock.recorder = &MockDeploymentInfoReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeploymentInfoReader) EXPECT() *MockDeploymentInfoReaderMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockDeploymentInfoReader) Read() (domain.DeploymentInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].(domain.DeploymentInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockDeploymentInfoReaderMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDeploymentInfoReader)(nil).Read))
}
